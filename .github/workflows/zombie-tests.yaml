#
# Copyright Quadrivium LLC
# All Rights Reserved
# SPDX-License-Identifier: Apache-2.0
#

name: Zombie-Tests

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: 'choice'
        options:
          - Release
          - Debug
          - RelWithDebInfo
      werror:
        description: 'Enable -Werror'
        required: true
        default: 'OFF'
        type: 'choice'
        options:
          - 'ON'
          - 'OFF'
      use_cache:
        description: 'Use cache for build'
        required: true
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      builder_latest_tag:
        description: 'Custom Builder tag'
        default: 'latest'
        required: false
        type: 'string'
      zombie_tester_latest_tag:
        description: 'Custom Zombie Tester tag'
        default: 'latest'
        required: false
        type: 'string'
      runtime_package_version:
        description: 'Custom runtime package version'
        default: '25.03.02-0.14.1-3fbf6c6'
        required: true
        type: 'string'

env:
  DOCKER_REGISTRY_PATH: ${{ secrets.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT }}/kagome-dev/
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  CTEST_OUTPUT_ON_FAILURE: 1
  CI: true

  CACHE_PATH: ./build_docker_ci/cache
  USE_CACHE: ${{ github.event.inputs.use_cache || 'true' }}
  BUILDER_LATEST_TAG: ${{ github.event.inputs.builder_latest_tag || 'latest' }}
  TESTER_LATEST_TAG: ${{ github.event.inputs.zombie_tester_latest_tag || 'latest' }}
  RUNTIME_PACKAGE_VERSION_NO_ARCH: ${{ github.event.inputs.runtime_package_version || '25.03.02-0.14.1-3fbf6c6' }}

  BUILD_TYPE: ${{ github.event.inputs.build_type }}

jobs:
  check_package_exists:
    runs-on: ubuntu-latest
    outputs:
      package_exists: ${{ steps.check.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: "Authenticate with Google Cloud"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Get commit version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: make configure

      - name: "Check package existence"
        id: check
        working-directory: ./housekeeping/docker/kagome-dev
        run: |
          exists=$(make kagome_package_check_version)
          echo "exists=$exists" >> $GITHUB_OUTPUT
  
  kagome_dev_docker_build:
    needs: [ check_package_exists ]
    if: needs.check_package_exists.outputs.package_exists == 'false'
    uses: ./.github/workflows/build.yaml
    with:
      build_debug: ${{ github.event.inputs.build_type == 'Debug' }}
      build_release: ${{ github.event.inputs.build_type == 'Release' }}
      build_relwithdebinfo: ${{ github.event.inputs.build_type == 'RelWithDebInfo' }}
      build_amd64: true
      build_arm64: true
      use_cache: ${{ github.event.inputs.use_cache }}
      builder_latest_tag: ${{ github.event.inputs.builder_latest_tag }}
      cache_upload_allowed: false
    secrets: inherit

  zombie_tests:
    timeout-minutes: 60
    needs: [check_package_exists, kagome_dev_docker_build]
    if: always() && (needs.check_package_exists.outputs.package_exists == 'true' || needs.kagome_dev_docker_build.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
        options:
          - name: "0001 PVF preparation & execution time"
            test: "test-polkadot-functional-0001-parachains-pvf"
          - name: "0003 BEEFY voting and finality, test MMR proofs. Assumes Rococo sessions of 1 minute"
            test: "test-polkadot-functional-0003-beefy-and-mmr"
          - name: "0007 Test if disputes triggered on finalized blocks within scope always end as valid"
            test: "test-polkadot-functional-0007-dispute-freshly-finalized"
          - name: "0008 Test if disputes triggered on finalized blocks out of scope never get to be confirmed and concluded"
            test: "test-polkadot-functional-0008-dispute-old-finalized"
          - name: "0009 Approval voting coalescing does not lag finality"
            test: "test-polkadot-functional-0009-approval-voting-coalescing"
          - name: "0011 Test we are producing blocks at 6 seconds clip"
            test: "test-polkadot-functional-0011-async-backing-6-seconds-rate"
          - name: "0013 Systematic chunk recovery is used if the chunk mapping feature is enabled."
            test: "test-polkadot-functional-0013-systematic-chunk-recovery"
          - name: "custom 0001 Warp sync from polkadot node"
            test: "test-custom-0001-validators-warp-sync"
##          - name: "Disputes initiation, conclusion and lag"
##            test: "test-polkadot-functional-0002-parachains-disputes"
##          - name: "Dispute finality lag when 1/3 of parachain validators always attempt to include an invalid block"
##            test: "test-polkadot-functional-0004-parachains-garbage-candidate"
##          - name: "Past-session dispute slashing"
##            test: "test-polkadot-functional-0005-parachains-disputes-past-session"
##          - name: "Test if parachains make progress with most of approvals being tranch0"
##            test: "test-polkadot-functional-0006-parachains-max-tranche0"
##          - name: "Test validator disabling effects"
##            test: "test-polkadot-functional-0010-validator-disabling"
        include:
          - platform: "linux/amd64"
            #runs_on: [ "actions-runner-controller" ]
            runs_on: ubuntu-24.04
          - platform: "linux/arm64"
            #runs_on: [ "self-hosted", "qdrvm-arm64" ]
            runs_on: ubuntu-24.04-arm

    runs-on: ${{ matrix.runs_on }}
    
    env:
      PLATFORM: ${{ matrix.platform }}
      ARCH: ${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

#      - name: Create and enable swap
#        run: |
#          free -h
#          df -h
#          sudo fallocate -l 4G /swapfile
#          sudo chmod 600 /swapfile
#          sudo mkswap /swapfile
#          sudo swapon /swapfile
#          sudo swapon --show
#          free -h
#          df -h
        
      - name: "Authenticate with Google Cloud"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Configure Docker for GCR"
        run: |
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ secrets.GCP_REGISTRY }} --quiet
        
      - name: "Configure Zombietests Makefile"
        working-directory: ./zombienet/docker
        run: make configure

      - name: "Configure Kagome Makefile"
        working-directory: ./housekeeping/docker/kagome-dev
        run: make configure

      - name: "Get package version"
        id: get_version
        working-directory: ./housekeeping/docker/kagome-dev
        run: |
          version=$(make kagome_get_package_version_no_arch)-${{ env.ARCH }}
          echo "kagome_package_version=$version" >> $GITHUB_ENV

      - name: "Run test"
        working-directory: ./zombienet/docker
        run: |
          make ${{ matrix.options.test }} \
            KAGOME_PACKAGE_VERSION=${{ env.kagome_package_version }}
        
      - name: "Upload test logs as artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ env.ARCH }}-${{ matrix.options.test }}
          path: /tmp/test_logs

      - name: "Clean Logs"
        if: always()
        run: rm -rf /tmp/test_logs

      - name: "Versions Info"
        if: always()
        run: |
          make get_versions_zombietests || true
