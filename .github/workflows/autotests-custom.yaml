#
# Copyright Quadrivium LLC
# All Rights Reserved
# SPDX-License-Identifier: Apache-2.0
#

name: Main Build Pipeline (New)

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type for zombie tests'
        required: false
        default: 'Release'
        type: 'choice'
        options:
          - 'Debug'
          - 'Release'
          - 'RelWithDebInfo'
      run_all_steps:
        description: 'Run all steps'
        required: true
        default: 'false'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      use_cache:
        description: 'Use cache'
        required: true
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      cache_upload_allowed:
        description: 'Force cache upload'
        required: true
        default: 'false'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      builder_latest_tag:
        description: 'Custom Builder tag'
        default: 'latest'
        required: false
        type: 'string'
      zombie_tester_latest_tag:
        description: 'Custom Zombie Tester tag'
        default: 'latest'
        required: false
        type: 'string'
      run_amd64:
        description: 'Run tests on AMD64 architecture'
        required: false
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      run_arm64:
        description: 'Run tests on ARM64 architecture'
        required: false
        default: 'false'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      runtime_package_version:
        description: 'Custom runtime package version'
        default: '25.03.15-0.14.1-3fbf6c6'
        required: false
        type: 'string'

env:
  BUILD_DIR: build
  KAGOME_IN_DOCKER: 1
  CTEST_OUTPUT_ON_FAILURE: 1
  GITHUB_HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
  GITHUB_HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}
  # Change all container: values to this variable once this feature is available
  # https://github.community/t/how-to-set-and-access-a-workflow-variable/17335/6
  CACHE_VERSION: v01
  CACHE_PATHS: |
    ~/Library/Caches/pip
    ~/.cargo
    ~/.ccache
    ~/.hunter
    ~/.rustup
  CACHE_PATH: ./build_docker_ci/cache
  DOCKER_BUILD_DIR_NAME: build_docker_ci
  DOCKER_REGISTRY_PATH: ${{ secrets.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT }}/kagome-dev/
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  USE_CACHE: ${{ github.event.inputs.use_cache || 'true' }}
  CACHE_UPLOAD_ALLOWED: ${{ github.event.inputs.cache_upload_allowed || 'false' }}
  DEFAULT_BUILD_TYPE: Release
  GIT_REF_NAME: ${{ github.ref_name }}
  IS_MAIN_OR_TAG: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) }}
  BUILDER_LATEST_TAG: ${{ github.event.inputs.builder_latest_tag || 'latest' }}
  TESTER_LATEST_TAG: ${{ github.event.inputs.zombie_tester_latest_tag || 'latest' }}
  RUN_AMD64: ${{ github.event.inputs.run_amd64 || 'true' }}
  RUN_ARM64: ${{ github.event.inputs.run_arm64 || 'false' }}
  RUNTIME_PACKAGE_VERSION: ${{ github.event.inputs.runtime_package_version || '25.03.02-0.14.1-3fbf6c6' }}

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    steps:
      - name: "Show context variables"
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "Is PR with labels? ${{ github.event_name == 'pull_request' && github.event.pull_request.labels != null }}"
          echo "Run all steps: ${{ github.event.inputs.run_all_steps == 'true' }}"
    
  MacOS:
    # temporary disabled
    if: false
    runs-on: macos-15
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        options:
          - name: "MacOS: Build Debug"
            build_type: "Debug"
            wasm_compiler: "WasmEdge"
          - name: "MacOS: Build Release"
            build_type: "Release"
            wasm_compiler: "WasmEdge"
          - name: "MacOS WAVM: Build Debug"
            build_type: "Debug"
            wasm_compiler: "WAVM"
    name: "${{ matrix.options.name }}"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      if: ${{ env.USE_CACHE == 'true' }}
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ github.job }}-${{ env.CACHE_VERSION }}
    - name: install
      run: ./housekeeping/macos/dependency.sh
      env:
        KAGOME_MAC_CI: 1
    - name: build
      run: ./housekeeping/make_build.sh -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.options.build_type }} -DCLEAR_OBJS=ON -DCOVERAGE=OFF -DWASM_COMPILER=${{ matrix.options.wasm_compiler }} -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/cxx20.cmake
      env:
        KAGOME_IN_DOCKER: 0
        KAGOME_MAC_CI: 1

  kagome_dev_docker_build_sanitizers:
    # temporary disabled
    if: false
    strategy:
      fail-fast: false
      matrix:
        options:
          - name: "Self-hosted: Linux: gcc-13 ASAN"
            params: -DCLEAR_OBJS=ON -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/gcc-13_cxx20.cmake -DASAN=ON
          - name: "Self-hosted: Linux: clang-19 TSAN WAVM"
            params: -DCLEAR_OBJS=ON -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/clang-19_cxx20.cmake -DTSAN=ON
          - name: "Self-hosted: Linux: clang-19 UBSAN"
            params: -DCLEAR_OBJS=ON -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/clang-19_cxx20.cmake -DUBSAN=ON -DUBSAN_TRAP=OFF -DUBSAN_ABORT=ON

    name: "${{ matrix.options.name }}"
    runs-on: [ actions-runner-controller ]
    timeout-minutes: 180
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Get master branch"
        if: github.ref != 'refs/heads/master'
        run: git fetch origin master:master || true

      - name: "Get commit version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: make configure

      - name: "Check version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: |
          SHORT_COMMIT_HASH=$(grep 'short_commit_hash:' commit_hash.txt | cut -d ' ' -f 2)
          echo "short_commit_hash=${SHORT_COMMIT_HASH}" | tee $GITHUB_ENV

      - name: "Cache dependencies"
        id: cache-restore
        if: ${{ env.USE_CACHE == 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ github.job }}-${{ env.CACHE_VERSION }}-sanitizers-${{ env.short_commit_hash }}
          restore-keys: |
            ${{ github.job }}-${{ env.CACHE_VERSION }}-sanitizers-

      - name: "Build target"
        working-directory: ./housekeeping/docker/kagome-dev
        run:
          make kagome_dev_docker_build_sanitizers \
          GITHUB_HUNTER_USERNAME=${{ secrets.HUNTER_USERNAME }} \
          GITHUB_HUNTER_TOKEN=${{ secrets.HUNTER_TOKEN }} \
          BUILDER_IMAGE_TAG=${{ env.BUILDER_LATEST_TAG }} \
          CI="true"
          SAN_PARAMS="${{ matrix.options.params }}"

      - name: "Cleaning cache"
        run: |
          find ${{ env.CACHE_PATH }} -name '*.pdf' -exec rm {} \;

      - name: "Always Save Cache"
        id: cache-save
        if: always() && (steps.cache-restore.outputs.cache-hit != 'true' || env.package_exist != 'True')
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

  kagome_dev_docker_build_tidy:
    # temporary disabled
    if: false
    runs-on: ubuntu-24.04
    timeout-minutes: 600
    name: "Linux: clang-tidy"

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Get master branch"
        if: github.ref != 'refs/heads/master'
        run: git fetch origin master:master || true

      - name: "Get commit version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: make configure

      - name: "Check version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: |
          SHORT_COMMIT_HASH=$(grep 'short_commit_hash:' commit_hash.txt | cut -d ' ' -f 2)
          echo "short_commit_hash=${SHORT_COMMIT_HASH}" | tee $GITHUB_ENV

      - name: "Cache dependencies"
        id: cache-restore
        if: ${{ env.USE_CACHE == 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ github.job }}-${{ env.CACHE_VERSION }}-tidy-${{ env.short_commit_hash }}
          restore-keys: |
            ${{ github.job }}-${{ env.CACHE_VERSION }}-tidy-

      - name: "Build target"
        working-directory: ./housekeeping/docker/kagome-dev
        run:
          make kagome_dev_docker_build_tidy \
          GITHUB_HUNTER_USERNAME=${{ secrets.HUNTER_USERNAME }} \
          GITHUB_HUNTER_TOKEN=${{ secrets.HUNTER_TOKEN }} \
          BUILDER_IMAGE_TAG=${{ env.BUILDER_LATEST_TAG }} \
          CI="true"

      - name: "Cleaning cache"
        run: |
          find ${{ env.CACHE_PATH }} -name '*.pdf' -exec rm {} \;

      - name: "Always Save Cache"
        id: cache-save
        if: always() && (steps.cache-restore.outputs.cache-hit != 'true' || env.package_exist != 'True')
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

  build:
    needs: [diagnostic]
    if: success()
    uses: ./.github/workflows/build.yaml
    with:
      build_amd64: ${{ github.event.inputs.run_amd64 || 'true' }}
      build_arm64: ${{ github.event.inputs.run_arm64 || 'false' }}
      build_debug: true
      build_release: true
      build_relwithdebinfo: true
      use_cache: ${{ github.event.inputs.use_cache || 'true' }}
      cache_upload_allowed: ${{ github.event.inputs.cache_upload_allowed || 'true' }}
      builder_latest_tag: ${{ github.event.inputs.builder_latest_tag || 'latest' }}
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
      HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}

  zombie_tests:
    needs: [build]
    if: success() && needs.build.result == 'success'
    uses: ./.github/workflows/zombie-tests.yaml
    with:
      build_type: ${{ github.event.inputs.build_type || 'Release' }}
      werror: 'OFF'
      use_cache: ${{ github.event.inputs.use_cache || 'true' }}
      builder_latest_tag: ${{ github.event.inputs.builder_latest_tag || 'latest' }}
      zombie_tester_latest_tag: ${{ github.event.inputs.zombie_tester_latest_tag || 'latest' }}
      runtime_package_version: ${{ github.event.inputs.runtime_package_version || '25.03.02-0.14.1-3fbf6c6' }}
      run_amd64: ${{ github.event.inputs.run_amd64 || 'true' }}
      run_arm64: ${{ github.event.inputs.run_arm64 || 'false' }}
      skip_build: 'true'  # Skip rebuilding packages since they were already built
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
