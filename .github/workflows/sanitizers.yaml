#
# Copyright Quadrivium LLC
# All Rights Reserved
# SPDX-License-Identifier: Apache-2.0
#

name: "Kagome Sanitizers"

on:
  push:
    branches:
      - master
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      build_tsan:
        description: "Build with TSAN?"
        type: boolean
        required: false
        default: true
      build_asanubsan:
        description: "Build with ASAN+UBSAN?"
        type: boolean
        required: false
        default: true
      build_amd64:
        description: "Build linux/amd64?"
        type: boolean
        required: false
        default: true
      build_arm64:
        description: "Build linux/arm64?"
        type: boolean
        required: false
        default: false
      use_cache:
        description: "Use cache?"
        type: boolean
        required: false
        default: true
      cache_upload_allowed:
        description: "Force cache upload?"
        type: boolean
        required: false
        default: false
      builder_latest_tag:
        description: "Custom Builder tag"
        type: string
        required: false
        default: "20250322" # Default to latest
      sanitizer_image_tag:
        description: "Custom Sanitizer Image tag"
        type: string
        required: false
        default: "latest" # Default to latest

  workflow_call:
    inputs:
      build_tsan:
        type: string
        default: "true"
        required: true
      build_asanubsan:
        type: string
        default: "true"
        required: true
      build_amd64:
        type: string
        default: "true"
        required: true
      build_arm64:
        type: string
        default: "false"
        required: true
      use_cache:
        type: string
        default: "true"
        required: true
      cache_upload_allowed:
        type: string
        default: "false"
        required: true
      builder_latest_tag:
        type: string
        default: "20250322" # Default to latest
        required: false
      sanitizer_image_tag:
        type: string
        default: "latest"
        required: false
    secrets:
      GCP_SERVICE_ACCOUNT_KEY:
        required: true
      GCP_REGISTRY:
        required: true
      GCP_PROJECT:
        required: true
      HUNTER_USERNAME:
        required: true
      HUNTER_TOKEN:
        required: true

env:
  DOCKER_REGISTRY_PATH: ${{ secrets.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT }}/kagome-dev/
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  CI: true
  CACHE_PATH: ./build_docker_sanitizers_ci/cache
  DOCKER_BUILD_DIR_NAME: build_docker_sanitizers_ci
  BUILD_TYPE_SANITIZERS: RelWithDebInfo

  USE_CACHE: ${{ inputs.use_cache || github.event.inputs.use_cache || 'true' }}
  CACHE_UPLOAD_ALLOWED: ${{ inputs.cache_upload_allowed || github.event.inputs.cache_upload_allowed || 'false' }}
  BUILDER_LATEST_TAG: ${{ inputs.builder_latest_tag || github.event.inputs.builder_latest_tag || '20250322' }}
  SANITIZER_IMAGE_TAG: ${{ inputs.sanitizer_image_tag || github.event.inputs.sanitizer_image_tag || 'latest' }}

  GITHUB_HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
  GITHUB_HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}
  GIT_REF_NAME: ${{ github.ref_name }}
  IS_MAIN_OR_TAG: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) }}
  GIT_TAG: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '' }}

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Generate sanitizer matrix"
        id: matrix
        uses: ./.github/actions/matrix-san
        with:
          build_tsan: ${{ inputs.build_tsan || github.event.inputs.build_tsan || 'true' }}
          build_asanubsan: ${{ inputs.build_asanubsan || github.event.inputs.build_asanubsan || 'true' }}
          build_amd64: ${{ inputs.build_amd64 || github.event.inputs.build_amd64 || 'true' }}
          build_arm64: ${{ inputs.build_arm64 || github.event.inputs.build_arm64 || 'false' }}
          amd64_runner: '"actions-runner-controller"'
          arm64_runner: '["self-hosted","qdrvm-arm64"]'
          
      - name: "Debug matrix configuration"
        run: |
          echo "Input parameters:"
          echo "build_tsan: ${{ inputs.build_tsan || github.event.inputs.build_tsan || 'true' }}"
          echo "build_asanubsan: ${{ inputs.build_asanubsan || github.event.inputs.build_asanubsan || 'true' }}"
          echo "build_amd64: ${{ inputs.build_amd64 || github.event.inputs.build_amd64 || 'true' }}"
          echo "build_arm64: ${{ inputs.build_arm64 || github.event.inputs.build_arm64 || 'false' }}"
          echo "use_cache: ${{ env.USE_CACHE }}"
          echo "---"
          echo "Matrix output: ${{ steps.matrix.outputs.matrix }}"

  build_sanitizers:
    needs: setup_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup_matrix.outputs.matrix) }}

    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 180

    env:
      PLATFORM: ${{ matrix.platform }}
      SANITIZER: ${{ matrix.sanitizer }}
      ARCHITECTURE: ${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}

    steps:
    - name: "Checkout"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Get master branch"
      if: ${{ github.ref != 'refs/heads/master' }}
      run: git fetch origin master:master || true

    - name: "Authenticate with Google Cloud"
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: "Set up Cloud SDK"
      uses: google-github-actions/setup-gcloud@v2

    - name: "Configure Docker for GCR"
      run: |
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker ${{ secrets.GCP_REGISTRY }} --quiet

    - name: "Get commit version"
      working-directory: ./housekeeping/docker/kagome-dev
      run: make configure

    - name: "Install zstd"
      run: |
        if ! command -v zstd &> /dev/null; then
          echo "zstd not found, installing..."
          sudo apt-get update && sudo apt-get install -y zstd || echo "Failed to install zstd, but continuing..."
        else
          echo "zstd is already installed"
        fi

    - name: "Get Sanitizer Cache"
      if: ${{ env.USE_CACHE == 'true' }}
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        make kagome_cache_get_${{ matrix.sanitizer }} || true

    - name: "Build and Test Sanitizer"
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        echo "Building for PLATFORM=${{ matrix.platform }}, SANITIZER=${{ matrix.sanitizer }}"
        make kagome_docker_build_${{ matrix.sanitizer }}
        echo "Build and test finished!"

    - name: "Upload Sanitizer Cache"
      if: ${{ success() }}
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        make kagome_cache_check_and_upload_${{ matrix.sanitizer }} || true

    - name: "Push Sanitizer APT Package"
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        make kagome_upload_${{ matrix.sanitizer }}_package

    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3.6.1

    - name: "Build Sanitizer Docker Image"
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        make kagome_image_build_${{ matrix.sanitizer }}

    - name: "Push Sanitizer Docker Image to GCR"
      working-directory: ./housekeeping/docker/kagome-dev
      run: |
        make kagome_image_push_${{ matrix.sanitizer }}

  docker_manifest:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs: [build_sanitizers]
    if: ${{ inputs.build_amd64 || github.event.inputs.build_amd64 || true }} && ${{ inputs.build_arm64 || github.event.inputs.build_arm64 || false }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Fetch master branch"
        if: github.ref != 'refs/heads/master'
        run: |
          git fetch origin master:master || true
          
      - name: "Print Git ref info"
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref_name: ${{ github.ref_name }}"
          echo "IS_MAIN_OR_TAG: ${{ env.IS_MAIN_OR_TAG }}"
          echo "GIT_REF_NAME: ${{ env.GIT_REF_NAME }}"
          echo "GIT_TAG: ${{ env.GIT_TAG }}"

      - name: "Authenticate with Google Cloud"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Configure Docker for GCR"
        run: |
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ secrets.GCP_REGISTRY }} --quiet

      - name: "Get commit version"
        working-directory: ./housekeeping/docker/kagome-dev
        run: make configure

      - name: "Create and Push Sanitizer Manifests"
        working-directory: ./housekeeping/docker/kagome-dev
        run: |
          if [[ "${{ inputs.build_tsan || github.event.inputs.build_tsan || 'true' }}" == "true" ]]; then
            echo "Processing TSAN manifests"
            make kagome_sanitizer_manifest_all_tsan
          fi
          
          if [[ "${{ inputs.build_asanubsan || github.event.inputs.build_asanubsan || 'true' }}" == "true" ]]; then
            echo "Processing ASANUBSAN manifests"
            make kagome_sanitizer_manifest_all_asanubsan
          fi

      - name: "Check sanitizer manifest status"
        working-directory: ./housekeeping/docker/kagome-dev
        if: always()
        run: |
          echo "Verifying manifests were created successfully..."
          make configure
          
          if [[ "${{ inputs.build_tsan || github.event.inputs.build_tsan || 'true' }}" == "true" ]]; then
            make kagome_sanitizer_manifest_inspect_tsan
          fi
          
          if [[ "${{ inputs.build_asanubsan || github.event.inputs.build_asanubsan || 'true' }}" == "true" ]]; then
            make kagome_sanitizer_manifest_inspect_asanubsan
          fi
