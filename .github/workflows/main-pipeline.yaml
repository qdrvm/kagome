# github actions
#
# Copyright Quadrivium LLC
# All Rights Reserved
# SPDX-License-Identifier: Apache-2.0
#

name: Main Build Pipeline (New)

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type for zombie tests'
        required: false
        default: 'Release'
        type: 'choice'
        options:
          - 'Debug'
          - 'Release'
          - 'RelWithDebInfo'
      use_cache:
        description: 'Use cache'
        required: true
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      cache_upload_allowed:
        description: 'Force cache upload'
        required: true
        default: 'false'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      builder_latest_tag:
        description: 'Custom Builder tag'
        default: '20250322'
        required: false
        type: 'string'
      zombie_tester_latest_tag:
        description: 'Custom Zombie Tester tag'
        default: '20250323'
        required: false
        type: 'string'
      run_amd64:
        description: 'Run tests on AMD64 architecture'
        required: false
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      run_arm64:
        description: 'Run tests on ARM64 architecture'
        required: false
        default: 'false'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      run_sanitizers:
        description: 'Run sanitizer checks'
        required: false
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      run_tidy:
        description: 'Run code quality checks'
        required: false
        default: 'true'
        type: 'choice'
        options:
          - 'true'
          - 'false'
      runtime_package_version:
        description: 'Custom runtime package version'
        default: '20250323-0.14.1-3fbf6c6'
        required: false
        type: 'string'

env:
  # Standard env vars
  BUILD_DIR: build
  KAGOME_IN_DOCKER: 1
  CTEST_OUTPUT_ON_FAILURE: 1
  GITHUB_HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
  GITHUB_HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}
  CACHE_VERSION: v01
  CACHE_PATHS: |
    ~/Library/Caches/pip
    ~/.cargo
    ~/.ccache
    ~/.hunter
    ~/.rustup
  CACHE_PATH: ./build_docker_ci/cache
  DOCKER_BUILD_DIR_NAME: build_docker_ci
  DOCKER_REGISTRY_PATH: ${{ secrets.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT }}/kagome-dev/
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  DEFAULT_BUILD_TYPE: Release
  GIT_REF_NAME: ${{ github.ref_name }}
  IS_MAIN_OR_TAG: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) }}

  # Configuration variables with proper defaults - no circular references
  BUILDER_LATEST_TAG: ${{ github.event.inputs.builder_latest_tag || vars.CI_BUILDER_TAG || '20250322' }}
  TESTER_LATEST_TAG: ${{ github.event.inputs.zombie_tester_latest_tag || vars.CI_TESTER_TAG || '20250323' }}
  RUNTIME_PACKAGE_VERSION: ${{ github.event.inputs.runtime_package_version || vars.CI_RUNTIME_PACKAGE_VERSION || '20250323-0.14.1-3fbf6c6' }}
  USE_CACHE: ${{ github.event.inputs.use_cache || 'true' }}
  CACHE_UPLOAD_ALLOWED: ${{ github.event.inputs.cache_upload_allowed || 'false' }}
  RUN_AMD64: ${{ github.event.inputs.run_amd64 || 'true' }}
  RUN_ARM64: ${{ github.event.inputs.run_arm64 || 'false' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}

jobs:
  diagnostic:
    runs-on: ubuntu-latest
    steps:
      - name: "Show context variables"
        run: |
          echo "=== GitHub Context ==="
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "Is PR: ${{ github.event_name == 'pull_request' }}"
          
          echo "=== Configuration ==="
          echo "Run AMD64: ${{ env.RUN_AMD64 }}"
          echo "Run ARM64: ${{ env.RUN_ARM64 }}"
          echo "Run Tidy: ${{ github.event.inputs.run_tidy != 'false' }}"
          echo "Run Sanitizers: ${{ github.event.inputs.run_sanitizers != 'false' }}"
          echo "Use Cache: ${{ env.USE_CACHE }}"
          echo "Cache Upload Allowed: ${{ env.CACHE_UPLOAD_ALLOWED }}"
          
          echo "=== Version Tags ==="
          echo "Builder tag: ${{ env.BUILDER_LATEST_TAG }}"
          echo "Tester tag: ${{ env.TESTER_LATEST_TAG }}"
          echo "Runtime package version: ${{ env.RUNTIME_PACKAGE_VERSION }}"
          echo "Build Type for Zombie Tests: ${{ env.BUILD_TYPE }}"
          
          echo "=== Deprecated Options ==="
          echo "Run all steps input (obsolete): ${{ github.event.inputs.run_all_steps }}"

  tidy:
    needs: [diagnostic]
    if: ${{ success() && (github.event.inputs.run_tidy != 'false') }}
    uses: ./.github/workflows/test-pipeline.yaml
    with:
      build_amd64: ${{ env.RUN_AMD64 }}
      build_arm64: ${{ env.RUN_ARM64 }}
      builder_latest_tag: ${{ env.BUILDER_LATEST_TAG }}
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
      HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}

  sanitizers:
    needs: [diagnostic]
    if: ${{ success() && (github.event.inputs.run_sanitizers != 'false') }}
    uses: ./.github/workflows/sanitizers.yaml
    with:
      build_tsan: "true"
      build_asanubsan: "true"
      build_amd64: ${{ env.RUN_AMD64 }}
      build_arm64: ${{ env.RUN_ARM64 }}
      use_cache: ${{ env.USE_CACHE }}
      cache_upload_allowed: ${{ env.CACHE_UPLOAD_ALLOWED }}
      builder_latest_tag: ${{ env.BUILDER_LATEST_TAG }}
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
      HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}

  build:
    needs: [diagnostic]
    if: success()
    uses: ./.github/workflows/build.yaml
    with:
      build_amd64: ${{ env.RUN_AMD64 }}
      build_arm64: ${{ env.RUN_ARM64 }}
      build_debug: true
      build_release: true
      build_relwithdebinfo: true
      use_cache: ${{ env.USE_CACHE }}
      cache_upload_allowed: ${{ env.CACHE_UPLOAD_ALLOWED }}
      builder_latest_tag: ${{ env.BUILDER_LATEST_TAG }}
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
      HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}

  zombie_tests:
    needs: [build]
    if: ${{ success() && needs.build.result == 'success' }}
    uses: ./.github/workflows/zombie-tests.yaml
    with:
      build_type: ${{ env.BUILD_TYPE }}
      use_cache: ${{ env.USE_CACHE }}
      builder_latest_tag: ${{ env.BUILDER_LATEST_TAG }}
      zombie_tester_latest_tag: ${{ env.TESTER_LATEST_TAG }}
      runtime_package_version: ${{ env.RUNTIME_PACKAGE_VERSION }}
      run_amd64: ${{ env.RUN_AMD64 }}
      run_arm64: ${{ env.RUN_ARM64 }}
      skip_build: 'true'
    secrets:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      GCP_REGISTRY: ${{ secrets.GCP_REGISTRY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
