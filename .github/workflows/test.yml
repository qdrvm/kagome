name: Build

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:

env:
  BUILD_DIR: build
  CTEST_OUTPUT_ON_FAILURE: 1
  GITHUB_HUNTER_USERNAME: ${{ secrets.HUNTER_USERNAME }}
  GITHUB_HUNTER_TOKEN: ${{ secrets.HUNTER_TOKEN }}
  # Change all container: values to this variable once this feature is available
  # https://github.community/t/how-to-set-and-access-a-workflow-variable/17335/6
  INDOCKER_IMAGE: harrm/kagome-dev:2-minideb
  CACHE_VERSION: v05
  CACHE_PATHS: |
    ~/Library/Caches/pip
    ~/.cargo
    ~/.ccache
    ~/.hunter
    ~/.rustup

jobs:
  MacOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ github.job }}-${{ env.CACHE_VERSION }}
    - name: install
      run: ./housekeeping/macos/dependency.sh
    - name: build
      env:
        DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
        LLVM_DIR: /usr/local/Cellar/llvm/12.0.0_1/lib/cmake/llvm/
      run: ./housekeeping/make_build.sh  -DCOVERAGE=OFF -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/cxx17.cmake

  Linux:
    strategy:
      fail-fast: false
      matrix:
        options:
         - name: "Linux: gcc-9 ASAN No Toolchain"
           run: ./housekeeping/make_build.sh -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/gcc-9_cxx17.cmake -DASAN=ON
         - name: "Linux: clang-9 TSAN"
           run: ./housekeeping/make_build.sh -DCMAKE_TOOLCHAIN_FILE=cmake/san/clang-9_cxx17_tsan.cmake
         - name: "Linux: clang-9 UBSAN"
           run: ./housekeeping/make_build.sh -DCMAKE_TOOLCHAIN_FILE=cmake/san/clang-9_cxx17_ubsan.cmake
    name: "${{ matrix.options.name }}"
    runs-on: ubuntu-latest
    container: harrm/kagome-dev:2-minideb
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ github.job }}-${{ matrix.options.name }}-${{ env.CACHE_VERSION }}
      - name: "${{ matrix.options.name }}"
        run: "${{ matrix.options.run }}"

  clang-tidy:
    name: "Linux: clang-tidy"
    runs-on: ubuntu-latest
    container: harrm/kagome-dev:2-minideb
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ github.job }}-${{ env.CACHE_VERSION }}
      - name: clang-tidy
        env:
          # build only generated files, so clang-tidy will work correctly
          BUILD_FINAL_TARGET: generated
        run: |
          ./housekeeping/make_build.sh
          ./housekeeping/clang-tidy-diff.sh

  coverage:
    name: "Linux: gcc-9 coverage/sonar"
    runs-on: ubuntu-latest
    container: harrm/kagome-dev:2-minideb
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ github.job }}-${{ env.CACHE_VERSION }}
      - name: makeBuild
        env:
          BUILD_FINAL_TARGET: ctest_coverage
        run: ./housekeeping/make_build.sh -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/gcc-9_cxx17.cmake -DCOVERAGE=ON
      - if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        name: Submit Coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: if [ "CODECOV_TOKEN" != "null" ]; then ./housekeeping/codecov.sh; else echo "Some secret undefined. Step passed..."; fi
      - if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        name: Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.ref }}
        run: if [ "$SONAR_TOKEN" != "null" -a "$GITHUB_USERNAME" != "null" -a "$GITHUB_TOKEN" != "null" ]; then ./housekeeping/sonar.sh; else echo "Some secret undefined. Step passed..."; fi

  Minideb:
    strategy:
      fail-fast: false
      matrix:
        options:
          - name: "Minideb: Build Debug"
            build-type: "Debug"
          - name: "Minideb: Build Release"
            build-type: "Release"
    name: "${{ matrix.options.name }}"
    runs-on: ubuntu-latest
    container: harrm/kagome-dev:2-minideb
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ github.job }}-${{ matrix.options.name }}-${{ env.CACHE_VERSION }}
      - name: "${{ matrix.options.name }}"
        env:
          BUILD_TYPE: "${{ matrix.options.build-type }}"
        run: ./housekeeping/docker/kagome-dev/make.sh

  Push:
    if: ${{ github.ref == 'refs/heads/master' || startsWith( github.ref, 'refs/tags/' ) }}
    needs: [clang-tidy, Linux, MacOS, Minideb]
    strategy:
      fail-fast: false
      matrix:
        options:
          - name: "Push Debug Docker image"
            build-type: "Debug"
          - name: "Push Release Docker image"
            build-type: "Release"
    runs-on: ubuntu-latest
    container: harrm/kagome-dev:2-minideb
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ github.job }}-${{ env.CACHE_VERSION }}
      - name: build
        env:
          BUILD_TYPE: "${{ matrix.options.build-type }}"
        run: ./housekeeping/docker/kagome-dev/make.sh
      - uses: azure/docker-login@v1
        with:
          login-server: https://index.docker.io/v1/
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker pack and push
        env:
          VERSION: ${{ github.ref }}
          BUILD_TYPE: "${{ matrix.options.build-type }}"
        run: ./housekeeping/docker/kagome/build_and_push.sh

  Trigger_CD:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [Push]
    runs-on: ubuntu-latest
    steps:
      - name: trigger cd job
        run: |
          curl -fI "${{ secrets.JENKINS_URL }}kagome-test&token=${{ secrets.JENKINS_TOKEN }}"
          curl -fI "${{ secrets.JENKINS_URL }}polkadot-test&token=${{ secrets.JENKINS_TOKEN }}"
