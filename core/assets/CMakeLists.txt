#
# Copyright Soramitsu Co., Ltd. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#

add_library(assets
    assets.cpp
    )


if(EMBEDDINGS)
    set(SOURCE ${PROJECT_SOURCE_DIR}/examples/first_kagome_chain/localchain.json)
    if(NOT EXISTS ${SOURCE})
        fatal_error("Not found resource for embedded assets: ${SOURCE}")
    endif()
    set(OUTPUT embedded_chainspec.hpp)
    add_custom_command(
        OUTPUT ${OUTPUT}
        PRE_BUILD
        COMMAND echo ARGS "// Embedded chain-spec. Generated by cmake from ${SOURCE}" > ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <assets/assets.hpp>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "namespace kagome::assets {" >> "${OUTPUT}"
        && echo >> ${OUTPUT}
        && echo -n "  const char *const embedded_chainspec = R\"%chainspec%\(" >> ${OUTPUT}
        && cat ${SOURCE} >> ${OUTPUT}
        && echo "\)%chainspec%\";" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "}  // namespace kagome::assets" >> ${OUTPUT}
        MAIN_DEPENDENCY ${SOURCE}
        DEPENDS ${SOURCE}
        COMMENT "Generating ${OUTPUT} with embedding chain spec"
        VERBATIM
        )
    target_sources(assets PRIVATE ${OUTPUT})

    set(SOURCE ${PROJECT_SOURCE_DIR}/examples/first_kagome_chain/base_path/dev/keystore)
    if(NOT IS_DIRECTORY ${SOURCE})
        fatal_error("Not found resource for embedded assets: ${SOURCE}")
    endif()
    set(OUTPUT embedded_keys.hpp)
    add_custom_command(
        OUTPUT ${OUTPUT}
        PRE_BUILD
        COMMAND echo ARGS "// Embedded keys. Generated by cmake from ${SOURCE}" > ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <assets/assets.hpp>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <vector>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "namespace kagome::assets {" >> "${OUTPUT}"
        && echo >> ${OUTPUT}
        && echo "  const std::vector<std::pair<const char *, const char *>> embedded_keys{" >> ${OUTPUT}
        && sh -c "cd ${SOURCE};\
            for key in * ; do\
             echo -n \"      {\\\"\";\
               echo -n $key;\
             echo \"\\\",\";\
             echo -n \"       \\\"\";\
               cat $key;\
             echo \"\\\"},\";\
            done"
            >> ${OUTPUT}
        && echo "  };" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "}  // namespace kagome::assets" >> ${OUTPUT}
        MAIN_DEPENDENCY ${SOURCE}
        DEPENDS ${SOURCE}
        COMMENT "Generating ${OUTPUT} with embedding keys"
        VERBATIM
        )
    target_sources(assets PRIVATE ${OUTPUT})
else()
    set(OUTPUT embedded_chainspec.hpp)
    add_custom_command(
        OUTPUT ${OUTPUT}
        PRE_BUILD
        COMMAND echo ARGS "// Chain-spec was not embed. EMBEDDINGS option is OFF" > ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <assets/assets.hpp>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "namespace kagome::assets {" >> "${OUTPUT}"
        && echo >> ${OUTPUT}
        && echo "  const char *const embedded_chainspec = nullptr;" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "}  // namespace kagome::assets" >> ${OUTPUT}
        COMMENT "Generating empty ${OUTPUT}"
        VERBATIM
    )
    target_sources(assets PRIVATE ${OUTPUT})

    set(OUTPUT embedded_keys.hpp)
    add_custom_command(
        OUTPUT ${OUTPUT}
        PRE_BUILD
        COMMAND echo ARGS "// Keys was not embed. EMBEDDINGS option is OFF" > ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <assets/assets.hpp>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "#include <vector>" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "namespace kagome::assets {" >> "${OUTPUT}"
        && echo >> ${OUTPUT}
        && echo "  const std::vector<std::pair<const char *, const char *>> embedded_keys;" >> ${OUTPUT}
        && echo >> ${OUTPUT}
        && echo "}  // namespace kagome::assets" >> ${OUTPUT}
        COMMENT "Generating empty ${OUTPUT}"
        VERBATIM
    )
    target_sources(assets PRIVATE ${OUTPUT})
endif()

target_include_directories(assets
    PRIVATE ${CMAKE_CURRENT_BINARY_DIR}
    )
target_sources(assets
    PRIVATE assets.cpp
    )
