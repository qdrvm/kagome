#
# Copyright Quadrivium LLC
# All Rights Reserved
# SPDX-License-Identifier: Apache-2.0
#

add_library(assets)

find_program(ECHO echo)

function(embedded_chainspec EMBEDDED_CHAINSPEC_NAME EMBEDDED_CHAINSPEC_SOURCE)
    set(OUTPUT ${EMBEDDED_CHAINSPEC_NAME}.cpp)
    if(EMBEDDINGS)
        set(INPUT ${CMAKE_CURRENT_LIST_DIR}/embedded_chainspec.cpp.in)
        file(READ ${EMBEDDED_CHAINSPEC_SOURCE} EMBEDDED_CHAINSPEC_CONTENT)
    else()
        set(INPUT ${CMAKE_CURRENT_LIST_DIR}/off/embedded_chainspec.cpp.in)
    endif()
    configure_file(${INPUT} ${OUTPUT})
    set_source_files_properties(${OUTPUT} PROPERTIES GENERATED TRUE)
    target_sources(assets PRIVATE ${OUTPUT})
endfunction()

embedded_chainspec(embedded_chainspec ${PROJECT_SOURCE_DIR}/examples/first_kagome_chain/localchain.json)
embedded_chainspec(embedded_chainspec_polkadot ${PROJECT_SOURCE_DIR}/examples/polkadot/polkadot.json)
embedded_chainspec(embedded_chainspec_kusama ${PROJECT_SOURCE_DIR}/examples/kusama/kusama.json)
embedded_chainspec(embedded_chainspec_rococo ${PROJECT_SOURCE_DIR}/examples/rococo/rococo.json)
embedded_chainspec(embedded_chainspec_westend ${PROJECT_SOURCE_DIR}/examples/westend/westend.json)

set(OUTPUT embedded_keys.cpp)
if(EMBEDDINGS)
    set(SOURCE ${PROJECT_SOURCE_DIR}/examples/first_kagome_chain/base_path/chains/rococo_dev/keystore)
    if(NOT IS_DIRECTORY ${SOURCE})
        fatal_error("Not found resource for embedded assets: ${SOURCE}")
    endif()
    add_custom_command(
        OUTPUT ${OUTPUT}
        PRE_BUILD
        COMMAND ${ECHO} ARGS "// Embedded keys. Generated by cmake from ${SOURCE}" > ${OUTPUT}
        COMMAND ${ECHO} ARGS >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "#include <assets/assets.hpp>" >> ${OUTPUT}
        COMMAND ${ECHO} ARGS >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "#include <vector>" >> ${OUTPUT}
        COMMAND ${ECHO} ARGS >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "namespace kagome::assets {" >> "${OUTPUT}"
        COMMAND ${ECHO} ARGS >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "  const std::vector<std::pair<const char *, const char *>> embedded_keys{" >> ${OUTPUT}
        COMMAND sh ARGS -c "cd ${SOURCE};\
            for key in * ; do\
             ${ECHO} -n \"      {\\\"\";\
               ${ECHO} -n $key;\
             ${ECHO} \"\\\",\";\
             ${ECHO} -n \"       \\\"\";\
               cat $key;\
             ${ECHO} \"\\\"},\";\
            done"
            >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "  };" >> ${OUTPUT}
        COMMAND ${ECHO} ARGS >> ${OUTPUT}
        COMMAND ${ECHO} ARGS "}  // namespace kagome::assets" >> ${OUTPUT}
        MAIN_DEPENDENCY ${SOURCE}
        DEPENDS ${SOURCE}
        COMMENT "Generating ${OUTPUT} with embedding keys"
        VERBATIM
        )
else()
    file(COPY ${CMAKE_CURRENT_LIST_DIR}/off/embedded_keys.cpp DESTINATION .)
endif()
target_sources(assets PRIVATE ${OUTPUT})

kagome_install(assets)
