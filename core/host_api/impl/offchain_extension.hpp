/**
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef KAGOME_HOSTAPI_OFFCHAINEXTENSION
#define KAGOME_HOSTAPI_OFFCHAINEXTENSION

#include "application/app_configuration.hpp"
#include "clock/clock.hpp"
#include "crypto/random_generator.hpp"
#include "log/logger.hpp"
#include "offchain/offchain_storage.hpp"
#include "runtime/types.hpp"

namespace kagome::offchain {
  class OffchainWorker;
}

namespace kagome::runtime {
  class MemoryProvider;
}

namespace kagome::host_api {

  class OffchainExtension final {
   public:
    OffchainExtension(
        std::shared_ptr<const runtime::MemoryProvider> memory_provider,
        std::shared_ptr<offchain::OffchainStorage> offchain_storage);

    /**
     * @brief Check whether the local node is a potential validator. Even if
     * this function returns 1, it does not mean that any keys are configured or
     * that the validator is registered in the chain
     * @code{.wasm}
     * (func $ext_offchain_is_validator_version_1 (return i8))
     * @endcode
     * @return a boolean equal to true if the node is a validator, false if
     * otherwise
     */
    runtime::WasmI8 ext_offchain_is_validator_version_1();

    /**
     * @brief Given a SCALE encoded extrinsic, this function submits the
     * extrinsic to the Host's transaction pool, ready to be propagated to
     * remote peers
     * @code{.wasm}
     * (func $ext_offchain_submit_transaction_version_1
     *   (param $data i64)
     *   (return i64)
     * )
     * @endcode
     * @param data byte array storing the encoded extrinsic
     * @return SCALE encoded `Result`. Neither on success or failure is there
     * any additional data provided
     */
    runtime::WasmSpan ext_offchain_submit_transaction_version_1(
        runtime::WasmSpan data);

    /**
     * @brief Returns the SCALE encoded, opaque information about the local
     * node's network state
     * @code{.wasm}
     * (func $ext_offchain_network_state_version_1 (result i64))
     * @endcode
     * @return SCALE encoded `Result`. On success it contains the
     * `OpaqueNetworkState` structure. On failure, an empty value is yielded
     * where its cause is implementation specific
     */
    runtime::WasmSpan ext_offchain_network_state_version_1();

    /**
     * @brief Returns current timestamp
     * @code{.wasm}
     * (func $ext_offchain_timestamp_version_1 (result u64))
     * @endcode
     * @return an u64 integer indicating the current UNIX timestamp
     * (milliseconds)
     */
    runtime::WasmU64 ext_offchain_timestamp_version_1();

    /**
     * @brief Pause the execution until `deadline` is reached
     * @code{.wasm}
     * (func $ext_offchain_sleep_until_version_1 (param $deadline u64))
     * @endcode
     * @param deadline an u64 integer indicating the current UNIX timestamp
     * (milliseconds)
     */
    void ext_offchain_sleep_until_version_1(runtime::WasmU64 deadline);

    /**
     * @brief Generates a random seed. This is a truly random non deterministic
     * seed generated by the host environment
     * @code{.wasm}
     * (func $ext_offchain_random_seed_version_1 (result i32))
     * @endcode
     * @return a 32-bit pointer to the buffer containing the 256-bit seed
     */
    runtime::WasmPointer ext_offchain_random_seed_version_1();

    /**
     * @brief Sets a value in the local storage. This storage is not part of the
     * consensus, it's only accessible by the offchain worker tasks running on
     * the same machine and is persisted between runs
     * @code{.wasm}
     * (func $ext_offchain_local_storage_set_version_1
     *   (param $kind i32)
     *   (param $key i64)
     *   (param $value i64)
     * )
     * @endcode
     * @param kind an i32 integer indicating the storage kind. A value equal to
     * 1 is used for a persistent storage and a value equal to 2 for local
     * storage
     * @param key a pointer-size indicating the key
     * @param value a pointer-size indicating the value
     */
    void ext_offchain_local_storage_set_version_1(runtime::WasmI32 kind,
                                                  runtime::WasmSpan key,
                                                  runtime::WasmSpan value);

    /**
     * @brief Remove a value from the local storage
     * @code{.wasm}
     * (func $ext_offchain_local_storage_clear_version_1
     *   (param $kind i32)
     *   (param $key i64)
     * )
     * @endcode
     * @param kind an i32 integer indicating the storage kind. A value equal to
     * 1 is used for a persistent storage and a value equal to 2 for local
     * storage
     * @param key a pointer-size indicating the key
     */
    void ext_offchain_local_storage_clear_version_1(runtime::WasmI32 kind,
                                                    runtime::WasmSpan key);

    /**
     * @brief Sets a new value in the local storage if the condition matches the
     * current value
     * @code{.wasm}
     * (func $ext_offchain_local_storage_compare_and_set_version_1
     *   (param $kind i32)
     *   (param $key i64)
     *   (param $old_value i64)
     *   (param $new_value i64)
     *   (result i8)
     * )
     * @endcode
     * @param kind an i32 integer indicating the storage kind. A value equal to
     * 1 is used for a persistent storage and a value equal to 2 for local
     * storage
     * @param key a pointer-size indicating the key
     * @param expected a pointer-size indicating the old value
     * @param value a pointer-size indicating the new value
     * @return a boolean equal to true if the new value has been set, false if
     * otherwise
     */
    runtime::WasmI8 ext_offchain_local_storage_compare_and_set_version_1(
        runtime::WasmI32 kind,
        runtime::WasmSpan key,
        runtime::WasmSpan expected,
        runtime::WasmSpan value);

    /**
     * @brief Gets a value from the local storage
     * @code{.wasm}
     * (func $ext_offchain_local_storage_get_version_1
     *   (param $kind i32)
     *   (param $key i64)
     *   (result i64)
     * )
     * @endcode
     * @param kind an i32 integer indicating the storage kind. A value equal to
     * 1 is used for a persistent storage and a value equal to 2 for local
     * storage
     * @param key a pointer-size indicating the key
     * @return a pointer-size indicating the SCALE encoded `Option` containing
     * the value or the corresponding key
     */
    runtime::WasmSpan ext_offchain_local_storage_get_version_1(
        runtime::WasmI32 kind, runtime::WasmSpan key);

    /**
     * @brief Initiates a HTTP request given by the HTTP method and the URL.
     * Returns the id of a newly started request
     * @code{.wasm}
     * (func $ext_offchain_http_request_start_version_1
     *   (param $method i64)
     *   (param $uri i64)
     *   (param $meta i64)
     *   (result i64)
     * )
     * @endcode
     * @param method a pointer-size indicating the HTTP method. Possible values
     * are "GET" and "POST"
     * @param uri a pointer-size indicating the URI
     * @param meta a future-reserved field containing additional, SCALE encoded
     * parameters. Currently, an empty array should be passed
     * @return a pointer-size indicating the SCALE encoded `Result` containing
     * the `i16` ID of the newly started request. On failure no additionally
     * data is provided. The cause of failure is implementation specific
     */
    runtime::WasmSpan ext_offchain_http_request_start_version_1(
        runtime::WasmSpan method,
        runtime::WasmSpan uri,
        runtime::WasmSpan meta);

    /**
     * @brief Append header to the request. Returns an error if the request
     * identifier is invalid, http_response_wait has already been called on the
     * specified request identifier, the deadline is reached or an I/O error has
     * happened (e.g. the remote has closed the connection)
     * @code{.wasm}
     * (func $ext_offchain_http_request_add_header_version_1
     *   (param $request_id i32)
     *   (param $name i64)
     *   (param $value i64)
     *   (result i64)
     * )
     * @endcode
     * @param request_id an i32 integer indicating the ID of the started request
     * @param name a pointer-size indicating the HTTP header name
     * @param value a pointer-size indicating the HTTP header value
     * @return a pointer-size indicating the SCALE encoded `Result`. Neither on
     * success or failure is there any additional data provided. The cause of
     * failure is implementation specific
     */
    runtime::WasmSpan ext_offchain_http_request_add_header_version_1(
        runtime::WasmI32 request_id,
        runtime::WasmSpan name,
        runtime::WasmSpan value);

    /**
     * @brief Writes a chunk of the request body. Returns a non-zero value in
     * case the deadline is reached or the chunk could not be written
     * @code{.wasm}
     * (func $ext_offchain_http_request_write_body_version_1
     *   (param $request_id i32)
     *   (param $chunk i64)
     *   (param $deadline i64)
     *   (result i64)
     * )
     * @endcode
     * @param request_id an i32 integer indicating the ID of the started request
     * @param chunk a pointer-size indicating the chunk of bytes. Writing an
     * empty chunk finalizes the request
     * @param deadline a pointer-size indicating the SCALE encoded `Option`
     * containing the UNIX timestamp. Passing `None` blocks indefinitely
     * @return a pointer-size indicating the SCALE encoded `Result`. On success,
     * no additional data is provided. On error it contains the `HTTP error`
     * type
     */
    runtime::WasmSpan ext_offchain_http_request_write_body_version_1(
        runtime::WasmI32 request_id,
        runtime::WasmSpan chunk,
        runtime::WasmSpan deadline);

    /**
     * @brief Returns an array of request statuses (the length is the same as
     * IDs). Note that if deadline is not provided the method will block
     * indefinitely, otherwise unready responses will produce DeadlineReached
     * status
     * @code{.wasm}
     * (func $ext_offchain_http_response_wait_version_1
     *   (param $ids i64)
     *   (param $deadline i64)
     *   (result i64)
     * )
     * @endcode
     * @param ids a pointer-size indicating the SCALE encoded array of started
     * request IDs
     * @param deadline a pointer-size indicating the SCALE encoded `Option`
     * containing the UNIX timestamp. Passing `None` blocks indefinitely
     * @return a pointer-size indicating the SCALE encoded array of request
     * statuses
     */
    runtime::WasmSpan ext_offchain_http_response_wait_version_1(
        runtime::WasmSpan ids, runtime::WasmSpan deadline);

    /**
     * @brief Read all HTTP response headers. Returns an array of key/value
     * pairs. Response headers must be read before the response body
     * @code{.wasm}
     * (func $ext_offchain_http_response_headers_version_1
     *   (param $request_id i32)
     *   (result i64)
     * )
     * @endcode
     * @param request_id an i32 integer indicating the ID of the started request
     * @return a pointer-size indicating a SCALE encoded array of key/value
     * pairs
     */
    runtime::WasmSpan ext_offchain_http_response_headers_version_1(
        runtime::WasmI32 request_id);

    /**
     * @brief Reads a chunk of body response to the given buffer. Returns the
     * number of bytes written or an error in case a deadline is reached or the
     * server closed the connection. If 0 is returned it means that the response
     * has been fully consumed and the request_id is now invalid. This implies
     * that response headers must be read before draining the body
     * @code{.wasm}
     * (func $ext_offchain_http_response_read_body_version_1
     *   (param $request_id i32)
     *   (param $buffer i64)
     *   (param $deadline i64)
     *   (result i64)
     * )
     * @endcode
     * @param request_id an i32 integer indicating the ID of the started request
     * @param deadline a pointer-size indicating the SCALE encoded `Option`
     * containing the UNIX timestamp. Passing `None` blocks indefinitely
     * @return a pointer-size indicating the SCALE encoded `Result` as defined.
     * On success it contains an `i32` integer specifying the number of bytes
     * written or a `HTTP error` type on failure
     */
    runtime::WasmSpan ext_offchain_http_response_read_body_version_1(
        runtime::WasmI32 request_id,
        runtime::WasmSpan buffer,
        runtime::WasmSpan deadline);

    /**
     * @brief Set the authorized nodes which are allowed to connect to the local
     * node. This function is offered by the Substrate codebase and is primarily
     * used for custom, non-Polkadot/Kusama chains. It is not required for the
     * public and open Polkadot protocol
     * @code{.wasm}
     * (func $ext_offchain_set_authorized_nodes_version_1
     *   (param $nodes i64)
     *   (param $authorized_only i32)
     * )
     * @endcode
     * @param nodes a pointer-size indicating the SCALE encoded array of libp2p
     * PeerId's. Invalid PeerId's are silently ignored
     * @param authorized_only If set to 1, then only the authorized nodes are
     * allowed to connect to the local node (whitelist). All other nodes are
     * rejected. If set to 0, then no such restriction is placed
     */
    void ext_offchain_set_authorized_nodes_version_1(
        runtime::WasmSpan nodes, runtime::WasmI32 authorized_only);

    /**
     * @brief Write a key value pair to the offchain database in a buffered
     * fashion
     * @code{.wasm}
     * (func $ext_offchain_index_set_version_1
     *   (param $key i64)
     *   (param $value i64)
     * )
     * @endcode
     * @param key a pointer-size indicating the key
     * @param value a pointer-size indicating the value
     */
    void ext_offchain_index_set_version_1(runtime::WasmSpan key,
                                          runtime::WasmSpan value);

    /**
     * @brief Remove a key and its associated value from the offchain
     * database
     * @code{.wasm}
     * (func $ext_offchain_index_clear_version_1 (param $key i64))
     * @endcode
     * @param key a pointer-size indicating the key
     */
    void ext_offchain_index_clear_version_1(runtime::WasmSpan key);

   private:
    offchain::OffchainWorker &getWorker();

    std::shared_ptr<const runtime::MemoryProvider> memory_provider_;
    std::shared_ptr<offchain::OffchainStorage> offchain_storage_;

    log::Logger log_;
  };

}  // namespace kagome::host_api

#endif  // KAGOME_HOSTAPI_OFFCHAINEXTENSION
