#include <iostream>
#include <memory>
#include <vector>
#include <map>

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
static std::map<void*, std::string> tracked_objects;

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å YamuxedConnection
class YamuxedConnection {
private:
    std::vector<char> data;
    int id;
    static int next_id;

public:
    YamuxedConnection() : data(400, 'X'), id(++next_id) {
        std::cout << "üèóÔ∏è YamuxedConnection #" << id << " —Å–æ–∑–¥–∞–Ω (ptr: " << this << ")\n";
        tracked_objects[this] = "YamuxedConnection #" + std::to_string(id);
    }
    
    ~YamuxedConnection() {
        std::cout << "üíÄ YamuxedConnection #" << id << " —É–Ω–∏—á—Ç–æ–∂–µ–Ω (ptr: " << this << ")\n";
        tracked_objects.erase(this);
    }
    
    int getId() const { return id; }
};

int YamuxedConnection::next_id = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Ç–µ—á–µ–∫
std::vector<std::shared_ptr<YamuxedConnection>> global_connections;
static std::shared_ptr<YamuxedConnection> static_connection;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è shared_ptr
void log_shared_ptr_info(const std::shared_ptr<YamuxedConnection>& ptr, const std::string& context) {
    if (ptr) {
        std::cout << "üîó " << context << ": ptr=" << ptr.get() 
                  << ", ref_count=" << ptr.use_count() << "\n";
    }
}

// –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —É—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é  
void create_global_leak() {
    std::cout << "\n2Ô∏è‚É£ === –°–æ–∑–¥–∞–µ–º —É—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ===\n";
    auto conn = std::make_shared<YamuxedConnection>();
    log_shared_ptr_info(conn, "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
    
    global_connections.push_back(conn);
    log_shared_ptr_info(conn, "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ global_connections");
    std::cout << "‚ö†Ô∏è –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ global_connections - –±—É–¥–µ—Ç –∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n";
    
    // conn —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ global_connections
}

// –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —É—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
void create_static_leak() {
    std::cout << "\n3Ô∏è‚É£ === –°–æ–∑–¥–∞–µ–º —É—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ===\n";
    static_connection = std::make_shared<YamuxedConnection>();
    log_shared_ptr_info(static_connection, "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –≤ static_connection");
    std::cout << "‚ö†Ô∏è –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ static_connection - –±—É–¥–µ—Ç –∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n";
}

// –§—É–Ω–∫—Ü–∏—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
void create_proper_usage() {
    std::cout << "\n1Ô∏è‚É£ === –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===\n";
    auto conn = std::make_shared<YamuxedConnection>();
    log_shared_ptr_info(conn, "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
    
    {
        auto conn_copy = conn;
        log_shared_ptr_info(conn, "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏");
        log_shared_ptr_info(conn_copy, "–ö–æ–ø–∏—è");
        std::cout << "üìã –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º scope\n";
        // conn_copy —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è –∑–¥–µ—Å—å
    }
    
    log_shared_ptr_info(conn, "–ü–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏–∏");
    std::cout << "‚úÖ –û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏\n";
    // conn —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è –∑–¥–µ—Å—å, –∏ –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
void show_current_state() {
    std::cout << "\nüìä === –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ===\n";
    std::cout << "–ñ–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ YamuxedConnection: " << tracked_objects.size() << "\n";
    for (const auto& pair : tracked_objects) {
        std::cout << "  - " << pair.second << " at " << pair.first << "\n";
    }
    
    std::cout << "global_connections.size(): " << global_connections.size() << "\n";
    std::cout << "static_connection.use_count(): " << (static_connection ? static_connection.use_count() : 0) << "\n";
}

int main() {
    std::cout << "üß™ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´ SHARED_PTR –£–¢–ï–ß–ï–ö ===\n";
    
    create_proper_usage();
    show_current_state();
    
    create_global_leak();
    show_current_state();
    
    create_static_leak();
    show_current_state();
    
    std::cout << "\nüéØ === –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ===\n";
    std::cout << "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è:\n";
    std::cout << "1. YamuxedConnection –≤ global_connections[0]\n";
    std::cout << "2. YamuxedConnection –≤ static_connection\n";
    std::cout << "\n–≠—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã,\n";
    std::cout << "—á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏!\n";
    
    std::cout << "\nüí° === –ö–ê–ö –ù–ê–ô–¢–ò –ü–†–û–ë–õ–ï–ú–£ ===\n";
    std::cout << "–í –†–ï–ê–õ–¨–ù–û–ú –∫–æ–¥–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å:\n";
    std::cout << "- –ì–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è shared_ptr<YamuxedConnection>\n";
    std::cout << "- –ö—Ç–æ –¥–µ—Ä–∂–∏—Ç –∫–æ–ø–∏–∏ shared_ptr\n";
    std::cout << "- –ö–∞–∫–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–ª–∏ –∫–ª–∞—Å—Å—ã –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç —Å—Å—ã–ª–∫–∏\n";
    std::cout << "- –ï—Å—Ç—å –ª–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏\n";
    
    return 0;
} 