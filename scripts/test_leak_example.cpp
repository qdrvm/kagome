#include <iostream>
#include <memory>
#include <vector>

namespace libp2p::connection {
    class YamuxedConnection { 
    public: 
        char data[400]; 
        int id;
        
        YamuxedConnection(int _id) : id(_id) {
            std::cout << "üîß YamuxedConnection #" << id << " created" << std::endl;
        }
        
        ~YamuxedConnection() {
            std::cout << "üíÄ YamuxedConnection #" << id << " destroyed" << std::endl;
        }
    };
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å shared_ptr –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ç–µ—á–∫—É
std::vector<std::shared_ptr<libp2p::connection::YamuxedConnection>> global_connections;

void create_connection_in_function(int id) {
    std::cout << "üìç Creating connection in function..." << std::endl;
    auto conn = std::make_shared<libp2p::connection::YamuxedConnection>(id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —É—Ç–µ—á–∫—É!
    global_connections.push_back(conn);
    std::cout << "‚ö†Ô∏è  Added to global_connections (potential leak source)" << std::endl;
}

void create_and_release_connection(int id) {
    std::cout << "üìç Creating temporary connection..." << std::endl;
    auto conn = std::make_shared<libp2p::connection::YamuxedConnection>(id);
    // –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
}

int main() {
    std::cout << "=== üß™ YamuxedConnection Leak Test ===" << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
    std::cout << "\n1. Creating normal connection (will be freed):" << std::endl;
    create_and_release_connection(1);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É—Ç–µ–∫–∞—Ç—å
    std::cout << "\n2. Creating leaked connections:" << std::endl;
    create_connection_in_function(2);
    create_connection_in_function(3);
    
    std::cout << "\nüìä Summary:" << std::endl;
    std::cout << "- Connection #1: properly freed" << std::endl;
    std::cout << "- Connections #2, #3: stored in global_connections (LEAKED!)" << std::endl;
    std::cout << "- Stack trace will show WHERE the leaked objects were created" << std::endl;
    
    // –ù–ï –æ—á–∏—â–∞–µ–º global_connections - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —É—Ç–µ—á–∫—É!
    // global_connections.clear();
    
    return 0;
} 