# Makefile –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ YamuxedConnection

CXX = g++
CXXFLAGS = -std=c++17 -fPIC -O2 -g -Wall -Wextra
LDFLAGS = -shared -ldl -lpthread

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
LIBRARY_PRECISE = libyamux_logger_precise.so
LIBRARY_HUNTER = libyamux_shared_ptr_hunter.so

# –¶–µ–ª–∏
all: $(LIBRARY_PRECISE) $(LIBRARY_HUNTER)

$(LIBRARY_PRECISE): yamux_logger_precise.cpp
	$(CXX) $(CXXFLAGS) -shared -fPIC -o $@ $< $(LDFLAGS)

$(LIBRARY_HUNTER): yamux_shared_ptr_hunter.cpp
	$(CXX) $(CXXFLAGS) -shared -fPIC -o $@ $< $(LDFLAGS)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
install: $(LIBRARY_PRECISE) $(LIBRARY_HUNTER)
	@echo "‚úÖ –û–±–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
	@echo ""
	@echo "üîç –ë–ê–ó–û–í–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ —Å–æ–∑–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç):"
	@echo "  LD_PRELOAD=./$(LIBRARY_PRECISE) ./kagome_node"
	@echo ""
	@echo "üéØ –ü–†–û–î–í–ò–ù–£–¢–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –æ—Å—Ç–∞–ª–∏—Å—å shared_ptr):"
	@echo "  LD_PRELOAD=./$(LIBRARY_HUNTER) ./kagome_node"
	@echo "  (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–æ–≤ –≤ –∫–æ–¥ kagome)"
	@echo ""
	@echo "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:"
	@echo "  tail -f yamux_shared_ptr_hunt.log"

# –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
test: $(LIBRARY_PRECISE)
	@echo "=== üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π LD_PRELOAD –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ==="
	@echo "–°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å YamuxedConnection –∏ –¥—Ä—É–≥–∏–º–∏ yamux —Ç–∏–ø–∞–º–∏..."
	@echo '#include <iostream>' > test_yamux_precise.cpp
	@echo '#include <memory>' >> test_yamux_precise.cpp
	@echo 'namespace libp2p::connection {' >> test_yamux_precise.cpp
	@echo '  class YamuxedConnection { public: char data[400]; };' >> test_yamux_precise.cpp
	@echo '  class YamuxStream { public: char data[400]; };  // –î—Ä—É–≥–æ–π yamux —Ç–∏–ø' >> test_yamux_precise.cpp
	@echo '}' >> test_yamux_precise.cpp
	@echo 'int main() {' >> test_yamux_precise.cpp
	@echo '  // –°–æ–∑–¥–∞–µ–º YamuxedConnection (–¥–æ–ª–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è)' >> test_yamux_precise.cpp
	@echo '  auto conn = std::make_shared<libp2p::connection::YamuxedConnection>();' >> test_yamux_precise.cpp
	@echo '  // –°–æ–∑–¥–∞–µ–º YamuxStream (–ù–ï –¥–æ–ª–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è)' >> test_yamux_precise.cpp
	@echo '  auto stream = std::make_shared<libp2p::connection::YamuxStream>();' >> test_yamux_precise.cpp
	@echo '  std::cout << "‚úÖ Created YamuxedConnection and YamuxStream" << std::endl;' >> test_yamux_precise.cpp
	@echo '  return 0;' >> test_yamux_precise.cpp
	@echo '}' >> test_yamux_precise.cpp
	$(CXX) -std=c++17 -o test_yamux_precise test_yamux_precise.cpp
	@echo "–ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–æ—á–Ω—ã–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–º..."
	LD_PRELOAD=./$(LIBRARY_PRECISE) ./test_yamux_precise
	@echo ""
	@echo "üìã –†–ï–ó–£–õ–¨–¢–ê–¢:"
	@test -f yamux_precise.log && echo "‚úÖ –¢–æ—á–Ω—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω" || echo "‚ùå –¢–æ—á–Ω—ã–π –ª–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω"
	@if [ -f yamux_precise.log ]; then echo "=== –°–û–î–ï–†–ñ–ò–ú–û–ï –õ–û–ì–ê ==="; cat yamux_precise.log; fi
	@echo ""
	@echo "üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ YamuxedConnection, –ù–ï YamuxStream!"

# –¢–µ—Å—Ç shared_ptr hunter –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
test-hunter: $(LIBRARY_HUNTER)
	@echo "=== üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ shared_ptr Hunter –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ==="
	@echo "–°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å shared_ptr –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º..."
	@echo '#include <iostream>' > test_shared_ptr_hunter.cpp
	@echo '#include <memory>' >> test_shared_ptr_hunter.cpp
	@echo '#include <vector>' >> test_shared_ptr_hunter.cpp
	@echo '#define YAMUX_SHARED_PTR_TRACKING' >> test_shared_ptr_hunter.cpp
	@echo '#include "YAMUX_SHARED_PTR_MACROS.h"' >> test_shared_ptr_hunter.cpp
	@echo 'namespace libp2p::connection {' >> test_shared_ptr_hunter.cpp
	@echo '  class YamuxedConnection { public: char data[400]; };' >> test_shared_ptr_hunter.cpp
	@echo '}' >> test_shared_ptr_hunter.cpp
	@echo 'std::vector<std::shared_ptr<libp2p::connection::YamuxedConnection>> global_connections;' >> test_shared_ptr_hunter.cpp
	@echo 'int main() {' >> test_shared_ptr_hunter.cpp
	@echo '  std::cout << "üß™ Testing shared_ptr tracking..." << std::endl;' >> test_shared_ptr_hunter.cpp
	@echo '  // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º shared_ptr' >> test_shared_ptr_hunter.cpp
	@echo '  auto conn1 = std::make_shared<libp2p::connection::YamuxedConnection>();' >> test_shared_ptr_hunter.cpp
	@echo '  YAMUX_TRACK_SHARED_PTR_CREATE(conn1, conn1.get());' >> test_shared_ptr_hunter.cpp
	@echo '  // –ö–æ–ø–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–£–¢–ï–ß–ö–ê!)' >> test_shared_ptr_hunter.cpp
	@echo '  global_connections.push_back(conn1);' >> test_shared_ptr_hunter.cpp
	@echo '  YAMUX_TRACK_SHARED_PTR_COPY(global_connections.back(), conn1);' >> test_shared_ptr_hunter.cpp
	@echo '  std::cout << "‚úÖ Created connection and stored in global container" << std::endl;' >> test_shared_ptr_hunter.cpp
	@echo '  return 0;' >> test_shared_ptr_hunter.cpp
	@echo '}' >> test_shared_ptr_hunter.cpp
	$(CXX) -std=c++17 -I. -o test_shared_ptr_hunter test_shared_ptr_hunter.cpp
	@echo "–ó–∞–ø—É—Å–∫–∞–µ–º —Å shared_ptr hunter..."
	LD_PRELOAD=./$(LIBRARY_HUNTER) ./test_shared_ptr_hunter
	@echo ""
	@echo "üìã –†–ï–ó–£–õ–¨–¢–ê–¢:"
	@test -f yamux_shared_ptr_hunt.log && echo "‚úÖ –õ–æ–≥ shared_ptr hunter —Å–æ–∑–¥–∞–Ω" || echo "‚ùå –õ–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω"
	@if [ -f yamux_shared_ptr_hunt.log ]; then echo "=== –°–û–î–ï–†–ñ–ò–ú–û–ï HUNTER –õ–û–ì–ê ==="; cat yamux_shared_ptr_hunt.log; fi

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã shared_ptr
demo: simple_shared_ptr_demo.cpp
	$(CXX) -std=c++17 -g -o simple_shared_ptr_demo simple_shared_ptr_demo.cpp
	@echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–±–ª–µ–º—ã shared_ptr —É—Ç–µ—á–µ–∫:"
	./simple_shared_ptr_demo

# –¢–µ—Å—Ç —Å —É—Ç–µ—á–∫–∞–º–∏
test-leaks: test_leak_example.cpp $(LIBRARY_PRECISE)
	$(CXX) -std=c++17 -g -o test_leak_example test_leak_example.cpp
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —É—Ç–µ—á–µ–∫ shared_ptr:"
	LD_PRELOAD=./$(LIBRARY_PRECISE) ./test_leak_example

# –û—á–∏—Å—Ç–∫–∞
clean:
	rm -f $(LIBRARY_PRECISE) $(LIBRARY_HUNTER) *.log test_yamux_precise test_leak_example simple_shared_ptr_demo test_yamux_precise.cpp test_shared_ptr_hunter test_shared_ptr_hunter.cpp

.PHONY: all install test test-hunter demo test-leaks clean 