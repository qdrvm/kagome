/**
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#include <gtest/gtest.h>
#include <array>
#include <common/buffer.hpp>
#include <consensus/grandpa/structs.hpp>
#include "scale/scale.hpp"
#include "testutil/outcome.hpp"

using kagome::common::Buffer;
using kagome::consensus::grandpa::VoteMessage;
using kagome::scale::decode;
using kagome::scale::encode;

//TEST(Scale, Special1) {
//  Buffer data{0x60, 0x33, 0x02, 0xbc, 0xf9, 0x7f, 0x00, 0x00, 0x1b, 0x34, 0x02,
//              0xbc, 0xf9, 0x7f, 0x00, 0x00, 0x1b, 0x34, 0x02, 0xbc, 0xf9, 0x7f,
//              0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf9, 0x7f, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0xf9, 0x7f, 0x00, 0x00, 0x80, 0x6b, 0x9d, 0xc3,
//              0xf9, 0x7f, 0x00, 0x00, 0x10, 0x05, 0x01, 0xbc, 0xf9, 0x7f, 0x00,
//              0x00, 0x80, 0x39, 0x3c, 0xc2, 0xf9, 0x7f, 0x00, 0x00, 0x50, 0x38,
//              0x3c, 0xc2, 0xf9, 0x7f, 0x00, 0x00, 0xcd, 0x4d, 0xaa, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x70, 0x39, 0x3c, 0xc2, 0xf9, 0x7f, 0x00, 0x00,
//              0x10, 0x05, 0x01, 0xbc, 0xf9, 0x7f, 0x00, 0x00, 0x30, 0x39, 0x3c,
//              0xc2, 0xf9, 0x7f, 0x00, 0x00, 0x80, 0x39, 0x3c, 0xc2, 0xf9, 0x7f,
//              0x00, 0x00, 0x80, 0x38, 0x3c, 0xc2, 0xf9, 0x7f, 0x00, 0x00, 0xbe,
//              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x2b, 0x26, 0x03,
//              0x00, 0x00, 0x00, 0x00, 0x04, 0x4d, 0x54, 0x00, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x00, 0xf9, 0x7f, 0x00, 0x00, 0x80, 0x6b, 0x9d};
//  auto vm = decode<VoteMessage>(data);
//  (void)vm;
//}

// clang-fornat off
TEST(Scale, Special2) {
  Buffer data{
  	// round_number
  	0x14,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  // voter set id
	  0xc7, 0xbc, 0x24, 0x1b, 0x36, 0xa6, 0x30, 0x28,
	  // vote

	  0x93, 0xa8, 0x09, 0xae, 0x28, 0xb5,

              0x22, 0x39, 0x89, 0x60, 0xfc, 0x75, 0x18, 0xb9, 0x97, 0x43, 0x4f,
              0x37, 0xc7, 0xeb, 0xcc, 0x6b, 0xe6, 0xaa, 0x09, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x04, 0xa4, 0x01, 0xc7, 0xbc, 0x24, 0x1b,
              0x36, 0xa6, 0x30, 0x28, 0x93, 0xa8, 0x09, 0xae, 0x28, 0xb5, 0x22,
              0x39, 0x89, 0x60, 0xfc, 0x75, 0x18, 0xb9, 0x97, 0x43, 0x4f, 0x37,
              0xc7, 0xeb, 0xcc, 0x6b, 0xe6, 0xaa, 0x09, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x8d, 0x9c, 0x09, 0x3f, 0xd0, 0x94, 0xe9, 0x07,
              0x62, 0x13, 0x90, 0x49, 0xdc, 0x04, 0x5f, 0xc8, 0x38, 0xdd, 0x17,
              0xce, 0xb8, 0x1a, 0xb2, 0x47, 0x87, 0x62, 0xd6, 0x63, 0x08, 0xf4,
              0xcb, 0x54, 0x33, 0x92, 0xec, 0x9c, 0x9e, 0xa1, 0x71, 0xcb, 0x8b,
              0x26, 0xe9, 0xa8, 0x78, 0xbf, 0xda, 0x2a, 0x82, 0xcb, 0xdf, 0x5e,
              0x33, 0x43, 0x6f, 0x0c, 0xd7, 0xd8, 0xe9, 0xca, 0x0a, 0xba, 0x7a,
              0x00, 0x88, 0xdc, 0x34, 0x17, 0xd5, 0x05, 0x8e, 0xc4, 0xb4, 0x50,
              0x3e, 0x0c, 0x12, 0xea, 0x1a, 0x0a, 0x89, 0xbe, 0x20, 0x0f, 0xe9,
              0x89, 0x22, 0x42, 0x3d, 0x43, 0x34, 0x01, 0x4f, 0xa6, 0xb0, 0xee};
  auto vm = decode<VoteMessage>(data);
  (void)vm;
}

//TEST(Scale, Special3) {
//  Buffer data{
//  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  0x39, 0x0e, 0x2a, 0xf3, 0x3c, 0xa4, 0xd9, 0x57,
//  0x8f, 0xd0, 0xc9, 0x57, 0x3c, 0x11,
//              0x2c, 0x41, 0x69, 0x99, 0xcc, 0x7a, 0x99, 0x76, 0x3c, 0x17, 0xe2,
//              0x56, 0x0e, 0x05, 0xbe, 0x70, 0xe3, 0xb2, 0x12, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x00, 0x04, 0xa4, 0x01, 0x8d, 0x9a, 0xbe, 0x16,
//              0xa7, 0xb1, 0xb1, 0x8d, 0x39, 0x1c, 0x8b, 0xed, 0x6d, 0xdd, 0xa7,
//              0xe9, 0xce, 0xcc, 0x01, 0x13, 0xa9, 0x27, 0x9c, 0x7d, 0xac, 0xb2,
//              0x8f, 0x51, 0xb6, 0x17, 0x71, 0xb7, 0x13, 0x00, 0x00, 0x00, 0x00,
//              0x00, 0x00, 0x00, 0x87, 0x3f, 0x03, 0xa2, 0x0b, 0xa8, 0xb7, 0x0a,
//              0xdd, 0xc1, 0x0c, 0x03, 0x1d, 0x36, 0x27, 0xc9, 0xe2, 0xb3, 0x9e,
//              0xb6, 0xaa, 0xec, 0x48, 0x4c, 0x7d, 0xaa, 0x95, 0x1e, 0x24, 0x51,
//              0x12, 0x88, 0x41, 0xed, 0x3c, 0x24, 0xe4, 0x27, 0x2e, 0xa1, 0xc0,
//              0xfd, 0x5e, 0x54, 0x7d, 0x03, 0x44, 0x17, 0xd7, 0x48, 0x8c, 0x54,
//              0x6a, 0x18, 0x2b, 0xb5, 0xef, 0xcc, 0xe0, 0xae, 0x09, 0x3b, 0x06,
//              0x06, 0x88, 0xdc, 0x34, 0x17, 0xd5, 0x05, 0x8e, 0xc4, 0xb4, 0x50,
//              0x3e, 0x0c, 0x12, 0xea, 0x1a, 0x0a, 0x89, 0xbe, 0x20, 0x0f, 0xe9,
//              0x89, 0x22, 0x42, 0x3d, 0x43, 0x34, 0x01, 0x4f, 0xa6, 0xb0, 0xee};
//  auto vm = decode<VoteMessage>(data);
//  (void)vm;
//}
